QUnit.test("hello test", function (assert) {
    assert.ok(1 == 1, "Passed!");
});
QUnit.test("Simple extend test", function (assert) {
    var name;
    name = ko.observable("Joe Smith").extend({ dirtyFlag: "" });
    assert.ok(name["isDirty"]() === false, "Initialised as clean");
    name("John");
    assert.ok(name["isDirty"]() === true, "Updated Now Dirty");
    name["reset"]();
    assert.ok(name["isDirty"]() === false, "Reset OK");
    assert.ok(name() === "John", "Value Unchanged OK");
    name("Mark");
    assert.ok(name["isDirty"]() === true, "Updated again Now Dirty");
});
/*
QUnit.test("Extend With Key, but no dirtyFlag2 instance", function (assert) {
    var name: KnockoutObservable<string>;
    assert.throws(function() {
        var name = ko.observable("Joe Smith").extend({ dirtyFlag: { key: "name" } });
    },
    "Exception thrown if extending with key that does not have matching dirtyFlag2");
});
*/
QUnit.test("Extend With empty Key", function (assert) {
    var name;
    assert.throws(function () {
        var name = ko.observable("Joe Smith").extend({ dirtyFlag: { key: "" } });
    }, "Exception thrown if extending with empty key");
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3Rlc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFVBQVUsTUFBTTtJQUNyQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLFVBQVUsTUFBTTtJQUM3QyxJQUFJLElBQWdDLENBQUM7SUFDckMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFNUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxLQUFLLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztJQUUvRCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDYixNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQzNELElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO0lBQ2hCLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssTUFBTSxFQUFFLG9CQUFvQixDQUFDLENBQUM7SUFDbkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2IsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxJQUFJLEVBQUUseUJBQXlCLENBQUMsQ0FBQztBQUNyRSxDQUFDLENBQUMsQ0FBQztBQUNIOzs7Ozs7OztFQVFFO0FBQ0YsS0FBSyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxVQUFVLE1BQU07SUFDaEQsSUFBSSxJQUFnQyxDQUFDO0lBQ3JDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDTixJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDN0UsQ0FBQyxFQUVELDhDQUE4QyxDQUNqRCxDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJRVW5pdC50ZXN0KFwiaGVsbG8gdGVzdFwiLCBmdW5jdGlvbiAoYXNzZXJ0KSB7XHJcbiAgICBhc3NlcnQub2soMSA9PSAxLCBcIlBhc3NlZCFcIik7XHJcbn0pO1xyXG5cclxuUVVuaXQudGVzdChcIlNpbXBsZSBleHRlbmQgdGVzdFwiLCBmdW5jdGlvbiAoYXNzZXJ0KSB7XHJcbiAgICB2YXIgbmFtZTogS25vY2tvdXRPYnNlcnZhYmxlPHN0cmluZz47XHJcbiAgICBuYW1lID0ga28ub2JzZXJ2YWJsZShcIkpvZSBTbWl0aFwiKS5leHRlbmQoeyBkaXJ0eUZsYWc6IFwiXCIgfSk7XHJcblxyXG4gICAgYXNzZXJ0Lm9rKG5hbWVbXCJpc0RpcnR5XCJdKCkgPT09IGZhbHNlLCBcIkluaXRpYWxpc2VkIGFzIGNsZWFuXCIpO1xyXG5cclxuICAgIG5hbWUoXCJKb2huXCIpO1xyXG4gICAgYXNzZXJ0Lm9rKG5hbWVbXCJpc0RpcnR5XCJdKCkgPT09IHRydWUsIFwiVXBkYXRlZCBOb3cgRGlydHlcIik7XHJcbiAgICBuYW1lW1wicmVzZXRcIl0oKTtcclxuICAgIGFzc2VydC5vayhuYW1lW1wiaXNEaXJ0eVwiXSgpID09PSBmYWxzZSwgXCJSZXNldCBPS1wiKTtcclxuICAgIGFzc2VydC5vayhuYW1lKCkgPT09IFwiSm9oblwiLCBcIlZhbHVlIFVuY2hhbmdlZCBPS1wiKTtcclxuICAgIG5hbWUoXCJNYXJrXCIpO1xyXG4gICAgYXNzZXJ0Lm9rKG5hbWVbXCJpc0RpcnR5XCJdKCkgPT09IHRydWUsIFwiVXBkYXRlZCBhZ2FpbiBOb3cgRGlydHlcIik7XHJcbn0pO1xyXG4vKlxyXG5RVW5pdC50ZXN0KFwiRXh0ZW5kIFdpdGggS2V5LCBidXQgbm8gZGlydHlGbGFnMiBpbnN0YW5jZVwiLCBmdW5jdGlvbiAoYXNzZXJ0KSB7XHJcbiAgICB2YXIgbmFtZTogS25vY2tvdXRPYnNlcnZhYmxlPHN0cmluZz47XHJcbiAgICBhc3NlcnQudGhyb3dzKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBuYW1lID0ga28ub2JzZXJ2YWJsZShcIkpvZSBTbWl0aFwiKS5leHRlbmQoeyBkaXJ0eUZsYWc6IHsga2V5OiBcIm5hbWVcIiB9IH0pO1xyXG4gICAgfSxcclxuICAgIFwiRXhjZXB0aW9uIHRocm93biBpZiBleHRlbmRpbmcgd2l0aCBrZXkgdGhhdCBkb2VzIG5vdCBoYXZlIG1hdGNoaW5nIGRpcnR5RmxhZzJcIik7XHJcbn0pO1xyXG4qL1xyXG5RVW5pdC50ZXN0KFwiRXh0ZW5kIFdpdGggZW1wdHkgS2V5XCIsIGZ1bmN0aW9uIChhc3NlcnQpIHtcclxuICAgIHZhciBuYW1lOiBLbm9ja291dE9ic2VydmFibGU8c3RyaW5nPjtcclxuICAgIGFzc2VydC50aHJvd3MoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9IGtvLm9ic2VydmFibGUoXCJKb2UgU21pdGhcIikuZXh0ZW5kKHsgZGlydHlGbGFnOiB7IGtleTogXCJcIiB9IH0pO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIFwiRXhjZXB0aW9uIHRocm93biBpZiBleHRlbmRpbmcgd2l0aCBlbXB0eSBrZXlcIlxyXG4gICAgKTtcclxufSk7Il19
