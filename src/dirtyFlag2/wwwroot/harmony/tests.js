import { dirtyFlag2 } from "./dirtyFlag2.js";
QUnit.test("Simple extend test", function (assert) {
    var name;
    name = ko.observable("Joe Smith").extend({ dirtyFlag: {} });
    assert.ok(name["isDirty"]() === false, "Initialised as clean");
    name("John");
    assert.ok(name["isDirty"]() === true, "Updated Now Dirty");
    name["reset"]();
    assert.ok(name["isDirty"]() === false, "Reset OK");
    assert.ok(name() === "John", "Value Unchanged OK");
    name("Mark");
    assert.ok(name["isDirty"]() === true, "Updated again Now Dirty");
});
QUnit.test("Simple extend with object", function (assert) {
    var name;
    assert.throws(function () {
        name = ko.observable({}).extend({ dirtyFlag: {} });
    }, "Exception extending object observable");
});
QUnit.test("Extend With empty Key", function (assert) {
    var name;
    assert.throws(function () {
        var name = ko.observable("Joe Smith").extend({ dirtyFlag: { key: "" } });
    }, "Exception thrown if extending with empty key");
});
QUnit.test("Extend With Key, but no dirtyFlag2 instance", function (assert) {
    var name;
    assert.throws(function () {
        var name = ko.observable("Joe Smith").extend({ dirtyFlag: { key: "Tests1.name" } });
    }, "Exception thrown if extending with key that does not have matching dirtyFlag2");
});
QUnit.test("Extend With Key, existing dirtyFlag2 instance, test simple functionality", function (assert) {
    var name;
    var df = new dirtyFlag2("Tests");
    name = ko.observable("Joe Smith").extend({ dirtyFlag: { key: "Tests.name" } });
    assert.ok(name["isDirty"]() === false, "Initialised as clean");
    name("John");
    assert.ok(name["isDirty"]() === true, "Updated Now Dirty");
    name["reset"]();
    assert.ok(name["isDirty"]() === false, "Reset OK");
    assert.ok(name() === "John", "Value Unchanged OK");
    name("Mark");
    assert.ok(name["isDirty"]() === true, "Updated again Now Dirty");
    df.dispose();
});
QUnit.test("Extend With Key, existing dirtyFlag2 instance, duplicate key", function (assert) {
    var name;
    var df = new dirtyFlag2("Tests2");
    name = ko.observable("Joe Smith").extend({ dirtyFlag: { key: "Tests2.name" } });
    assert.throws(function () {
        var name2 = ko.observable("Joe Smith").extend({ dirtyFlag: { key: "Tests2.name" } });
    }, "trying to re-register key");
    df.dispose();
});
///Array observable tests
QUnit.test("Simple array extend test", function (assert) {
    var names;
    names = ko.observableArray(["Joe Smith"]).extend({ dirtyFlag: {} });
    assert.ok(names["isDirty"]() === false, "Initialised as clean");
    names.push("John");
    assert.ok(names["isDirty"]() === true, "Updated Now Dirty");
    names["reset"]();
    assert.ok(names["isDirty"]() === false, "Reset OK");
    //assert.ok(name() === "John", "Value Unchanged OK");
    names(["Joe Smith"]);
    assert.ok(names["isDirty"]() === true, "Updated again Now Dirty");
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LEVBQUUsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pGLENBQUMsRUFDRCwyQkFBMkIsQ0FDOUIsQ0FBQztJQUNGLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNqQixDQUFDLENBQUMsQ0FBQztBQUVILHlCQUF5QjtBQUV6QixLQUFLLENBQUMsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFVBQVUsTUFBTTtJQUNuRCxJQUFJLEtBQXNDLENBQUM7SUFDM0MsS0FBSyxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRXBFLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUM7SUFFaEUsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuQixNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQzVELEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO0lBQ2pCLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3BELHFEQUFxRDtJQUNyRCxLQUFLLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ3JCLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssSUFBSSxFQUFFLHlCQUF5QixDQUFDLENBQUM7QUFDdEUsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkaXJ0eUZsYWcyIH0gZnJvbSBcIi4vZGlydHlGbGFnMi5qc1wiO1xyXG5cclxuUVVuaXQudGVzdChcIlNpbXBsZSBleHRlbmQgdGVzdFwiLCBmdW5jdGlvbiAoYXNzZXJ0KSB7XHJcbiAgICB2YXIgbmFtZTogS25vY2tvdXRPYnNlcnZhYmxlPHN0cmluZz47XHJcbiAgICBuYW1lID0ga28ub2JzZXJ2YWJsZShcIkpvZSBTbWl0aFwiKS5leHRlbmQoeyBkaXJ0eUZsYWc6IHt9IH0pO1xyXG5cclxuICAgIGFzc2VydC5vayhuYW1lW1wiaXNEaXJ0eVwiXSgpID09PSBmYWxzZSwgXCJJbml0aWFsaXNlZCBhcyBjbGVhblwiKTtcclxuXHJcbiAgICBuYW1lKFwiSm9oblwiKTtcclxuICAgIGFzc2VydC5vayhuYW1lW1wiaXNEaXJ0eVwiXSgpID09PSB0cnVlLCBcIlVwZGF0ZWQgTm93IERpcnR5XCIpO1xyXG4gICAgbmFtZVtcInJlc2V0XCJdKCk7XHJcbiAgICBhc3NlcnQub2sobmFtZVtcImlzRGlydHlcIl0oKSA9PT0gZmFsc2UsIFwiUmVzZXQgT0tcIik7XHJcbiAgICBhc3NlcnQub2sobmFtZSgpID09PSBcIkpvaG5cIiwgXCJWYWx1ZSBVbmNoYW5nZWQgT0tcIik7XHJcbiAgICBuYW1lKFwiTWFya1wiKTtcclxuICAgIGFzc2VydC5vayhuYW1lW1wiaXNEaXJ0eVwiXSgpID09PSB0cnVlLCBcIlVwZGF0ZWQgYWdhaW4gTm93IERpcnR5XCIpO1xyXG59KTtcclxuXHJcblFVbml0LnRlc3QoXCJTaW1wbGUgZXh0ZW5kIHdpdGggb2JqZWN0XCIsIGZ1bmN0aW9uIChhc3NlcnQpIHtcclxuICAgIHZhciBuYW1lOiBLbm9ja291dE9ic2VydmFibGU8b2JqZWN0PjtcclxuICAgIGFzc2VydC50aHJvd3MoXHJcbiAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBuYW1lID0ga28ub2JzZXJ2YWJsZSh7fSkuZXh0ZW5kKHsgZGlydHlGbGFnOiB7fSB9KTtcclxuICAgICAgICB9LCBcIkV4Y2VwdGlvbiBleHRlbmRpbmcgb2JqZWN0IG9ic2VydmFibGVcIlxyXG4gICAgKTtcclxufSk7XHJcblFVbml0LnRlc3QoXCJFeHRlbmQgV2l0aCBlbXB0eSBLZXlcIiwgZnVuY3Rpb24gKGFzc2VydCkge1xyXG4gICAgdmFyIG5hbWU6IEtub2Nrb3V0T2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgYXNzZXJ0LnRocm93cyhcclxuICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG5hbWUgPSBrby5vYnNlcnZhYmxlKFwiSm9lIFNtaXRoXCIpLmV4dGVuZCh7IGRpcnR5RmxhZzogeyBrZXk6IFwiXCIgfSB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiRXhjZXB0aW9uIHRocm93biBpZiBleHRlbmRpbmcgd2l0aCBlbXB0eSBrZXlcIlxyXG4gICAgKTtcclxufSk7XHJcblxyXG5RVW5pdC50ZXN0KFwiRXh0ZW5kIFdpdGggS2V5LCBidXQgbm8gZGlydHlGbGFnMiBpbnN0YW5jZVwiLCBmdW5jdGlvbiAoYXNzZXJ0KSB7XHJcbiAgICB2YXIgbmFtZTogS25vY2tvdXRPYnNlcnZhYmxlPHN0cmluZz47XHJcbiAgICBhc3NlcnQudGhyb3dzKFxyXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSBrby5vYnNlcnZhYmxlKFwiSm9lIFNtaXRoXCIpLmV4dGVuZCh7IGRpcnR5RmxhZzogeyBrZXk6IFwiVGVzdHMxLm5hbWVcIiB9IH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJFeGNlcHRpb24gdGhyb3duIGlmIGV4dGVuZGluZyB3aXRoIGtleSB0aGF0IGRvZXMgbm90IGhhdmUgbWF0Y2hpbmcgZGlydHlGbGFnMlwiXHJcbiAgICApO1xyXG59KTtcclxuXHJcblFVbml0LnRlc3QoXCJFeHRlbmQgV2l0aCBLZXksIGV4aXN0aW5nIGRpcnR5RmxhZzIgaW5zdGFuY2UsIHRlc3Qgc2ltcGxlIGZ1bmN0aW9uYWxpdHlcIiwgZnVuY3Rpb24gKGFzc2VydCkge1xyXG4gICAgdmFyIG5hbWU6IEtub2Nrb3V0T2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgdmFyIGRmID0gbmV3IGRpcnR5RmxhZzIoXCJUZXN0c1wiKTtcclxuICAgIG5hbWUgPSBrby5vYnNlcnZhYmxlKFwiSm9lIFNtaXRoXCIpLmV4dGVuZCh7IGRpcnR5RmxhZzogeyBrZXk6IFwiVGVzdHMubmFtZVwiIH0gfSk7XHJcbiAgICBhc3NlcnQub2sobmFtZVtcImlzRGlydHlcIl0oKSA9PT0gZmFsc2UsIFwiSW5pdGlhbGlzZWQgYXMgY2xlYW5cIik7XHJcblxyXG4gICAgbmFtZShcIkpvaG5cIik7XHJcbiAgICBhc3NlcnQub2sobmFtZVtcImlzRGlydHlcIl0oKSA9PT0gdHJ1ZSwgXCJVcGRhdGVkIE5vdyBEaXJ0eVwiKTtcclxuICAgIG5hbWVbXCJyZXNldFwiXSgpO1xyXG4gICAgYXNzZXJ0Lm9rKG5hbWVbXCJpc0RpcnR5XCJdKCkgPT09IGZhbHNlLCBcIlJlc2V0IE9LXCIpO1xyXG4gICAgYXNzZXJ0Lm9rKG5hbWUoKSA9PT0gXCJKb2huXCIsIFwiVmFsdWUgVW5jaGFuZ2VkIE9LXCIpO1xyXG4gICAgbmFtZShcIk1hcmtcIik7XHJcbiAgICBhc3NlcnQub2sobmFtZVtcImlzRGlydHlcIl0oKSA9PT0gdHJ1ZSwgXCJVcGRhdGVkIGFnYWluIE5vdyBEaXJ0eVwiKTtcclxuICAgIGRmLmRpc3Bvc2UoKTtcclxufSk7XHJcblFVbml0LnRlc3QoXCJFeHRlbmQgV2l0aCBLZXksIGV4aXN0aW5nIGRpcnR5RmxhZzIgaW5zdGFuY2UsIGR1cGxpY2F0ZSBrZXlcIiwgZnVuY3Rpb24gKGFzc2VydCkge1xyXG4gICAgdmFyIG5hbWU6IEtub2Nrb3V0T2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgdmFyIGRmID0gbmV3IGRpcnR5RmxhZzIoXCJUZXN0czJcIik7XHJcbiAgICBuYW1lID0ga28ub2JzZXJ2YWJsZShcIkpvZSBTbWl0aFwiKS5leHRlbmQoeyBkaXJ0eUZsYWc6IHsga2V5OiBcIlRlc3RzMi5uYW1lXCIgfSB9KTtcclxuICAgIGFzc2VydC50aHJvd3MoXHJcbiAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbmFtZTIgPSBrby5vYnNlcnZhYmxlKFwiSm9lIFNtaXRoXCIpLmV4dGVuZCh7IGRpcnR5RmxhZzogeyBrZXk6IFwiVGVzdHMyLm5hbWVcIiB9IH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJ0cnlpbmcgdG8gcmUtcmVnaXN0ZXIga2V5XCJcclxuICAgICk7XHJcbiAgICBkZi5kaXNwb3NlKCk7XHJcbn0pO1xyXG5cclxuLy8vQXJyYXkgb2JzZXJ2YWJsZSB0ZXN0c1xyXG5cclxuUVVuaXQudGVzdChcIlNpbXBsZSBhcnJheSBleHRlbmQgdGVzdFwiLCBmdW5jdGlvbiAoYXNzZXJ0KSB7XHJcbiAgICB2YXIgbmFtZXM6IEtub2Nrb3V0T2JzZXJ2YWJsZUFycmF5PHN0cmluZz47XHJcbiAgICBuYW1lcyA9IGtvLm9ic2VydmFibGVBcnJheShbXCJKb2UgU21pdGhcIl0pLmV4dGVuZCh7IGRpcnR5RmxhZzoge30gfSk7XHJcblxyXG4gICAgYXNzZXJ0Lm9rKG5hbWVzW1wiaXNEaXJ0eVwiXSgpID09PSBmYWxzZSwgXCJJbml0aWFsaXNlZCBhcyBjbGVhblwiKTtcclxuXHJcbiAgICBuYW1lcy5wdXNoKFwiSm9oblwiKTtcclxuICAgIGFzc2VydC5vayhuYW1lc1tcImlzRGlydHlcIl0oKSA9PT0gdHJ1ZSwgXCJVcGRhdGVkIE5vdyBEaXJ0eVwiKTtcclxuICAgIG5hbWVzW1wicmVzZXRcIl0oKTtcclxuICAgIGFzc2VydC5vayhuYW1lc1tcImlzRGlydHlcIl0oKSA9PT0gZmFsc2UsIFwiUmVzZXQgT0tcIik7XHJcbiAgICAvL2Fzc2VydC5vayhuYW1lKCkgPT09IFwiSm9oblwiLCBcIlZhbHVlIFVuY2hhbmdlZCBPS1wiKTtcclxuICAgIG5hbWVzKFtcIkpvZSBTbWl0aFwiXSk7XHJcbiAgICBhc3NlcnQub2sobmFtZXNbXCJpc0RpcnR5XCJdKCkgPT09IHRydWUsIFwiVXBkYXRlZCBhZ2FpbiBOb3cgRGlydHlcIik7XHJcbn0pO1xyXG4iXX0=
